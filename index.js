#!/usr/bin/env node

import chalk from "chalk";
import boxen from "boxen";

// ASCII Logo
const asciiLogo = `
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†û‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°û‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£§‚£∂‚£∂‚£§‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚†û‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚°∞‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚£†‚†û‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∏‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†ã‚†Ä‚†Ä‚†Ä‚£Ä‚£¥‚°ø‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚°†‚†û‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£§‚£Ñ‚£†‚£§‚£§‚£§‚£¥‚†ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£§‚£∂‚£§‚£Ñ‚£¥‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†ì‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚£ø‚£ø‚£ø‚£è‚°è‚¢π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£∂‚£§‚£§‚£Ä‚£Ä‚£Ä‚£Ä‚†Ä
‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚†ã‚†Å‚†Ä
‚£ø‚£∑‚£¶‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚†Ä‚¢π‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Ñ‚†Ä‚†Ä‚†Ä
‚£ú‚£ª‚£ø‚£∑‚°Ä‚†Ä‚†Ä‚†Ä‚£¥‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†Å‚†Ä‚†Ä‚†à‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£Ñ‚†Ä
‚£ø‚£ø‚£ø‚£ø‚£∑‚°†‚£§‚†æ‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∏‚°á‚¢π‚£ø‚£ø‚†Ä‚†Ä‚¢π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†Ü
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚†§‚¢§‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†É‚†Ä‚†à‚†ì‚†§‚£Ä‚†Ä‚†Ä‚†à‚†Ä‚¢ø‚£ø‚†Ä‚†Ä‚†à‚°ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†Ä
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ü‚£º‚£ø‚£ø‚°ø‚¢π‚†õ‚°ù‚£ø‚£ø‚°è‚£º‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ô‚†Ä‚†Ä‚†Ä‚†à‚†õ‚†Ä‚†Ä‚†Ä‚†É‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ä‚†Ä
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†ü‚¢ª‚£ø‚°á‚†à‚£â‚£ª‚†æ‚°ø‚†Ä‚†É‚†Ä‚£§‚°∂‚†æ‚†ø‚£∂‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†Ñ‚†≤‚†û‚†â‚¢π‚°ü‚¢π‚£ø‚£ø‚£ø‚°ü‚†ø‚†ß‚†Ä
‚£ø‚£ª‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ä‚†∫‚£ø‚£ø‚°Ñ‚¢ß‚£º‚¢Ä‚°á‚†Ä‚†Ä‚†Ä‚†â‚†Å‚†Ä‚†Ä‚†Ä‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°è‚†Ä‚£Ä‚£Ä‚£Ä‚†à‚†Ä‚¢∏‚£ø‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä
‚£µ‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚£ø‚£Ü‚£ø‚†ø‚£ø‚£Æ‚°ô‚¢ø‚°É‚†Ä‚¢†‚£¶‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°∑‚†Ä‚†â‚†â‚†π‚†á‚†Ä‚£æ‚£ø‚†õ‚¢ø‚£∑‚†Ä‚†Ä‚†Ä
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚¢ª‚£ø‚£Ü‚¢Ä‚°ø‚†ã‚†ô‚¢∫‚°á‚†Ä‚†Ä‚£ø‚†â‚†õ‚†ì‚†í‚†§‚†§‚£Ä‚£Ä‚°Ä‚†Ä‚†ä‚†Ä‚†â‚†õ‚†ì‚†í‚†í‚£º‚£ø‚†á‚†Ä‚†Ä‚†à‚†É‚†Ä‚†Ä
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£á‚£ø‚£ø‚£ø‚°â‚†Ä‚†Ä‚†Ä‚†à‚£ø‚°Ñ‚†Ä‚†π‚£¶‚£º‚†§‚†§‚†Ñ‚£Ä‚£Ä‚†Ä‚†à‚†â‚†â‚†ô‚†≤‚¢∂‚†Ü‚†Ä‚£º‚†ó‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ª‚£¶‚°Ä‚†ô‚†£‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†ô‚†í‚¢∂‚£º‚£¥‚£Ø‚£§‚£º‚£ç‚£Ä‚£Ä‚£Ä‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ñ‚†Ä‚†Ä‚†Ä‚†∏‚£ø‚£ø‚£ø‚£¶‚£Ä‚†à‚†ì‚†¶‚£Ñ‚£Ä‚°Ä‚†Ä‚¢Ä‚£†‚†ø‚†É‚£†‚†û‚†Å‚†Ä‚†Ä‚†Ä‚†â‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚†Ä‚†Ä‚†Ä‚†∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£¶‚£Ñ‚°Ä‚†Ä‚†â‚£â‚£°‚†§‚†ñ‚†ã‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚£ø‚£ø‚£ø‚£ß‚°Ä‚†Ä‚†à‚¢ø‚£ø‚£ø‚£ø‚°ü‚†â‚†Ä‚†Ä‚†â‚†â‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£π‚£ø‚£ø‚£ø‚°ø‚¢ø‚£Ñ‚†Ä‚†à‚¢ª‚£æ‚£ø‚£∑‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚¢ª‚†õ‚£ø‚£ø‚£ø‚£ø‚°Ä‚†ª‚£∑‚£¥‚£ø‚£ø‚£ø‚£ø‚£∑‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
`;
const details = {
  name: chalk.cyan("      Sarthak Kapila"),
  occupation: chalk.magenta("    Full Stack Web Developer passionate about Web3 and Blockchain technologies."),
  website: chalk.blue(`https://sarthakkapila.xyz`),
  github: chalk.green(`https://github.com/sarthakkapila`),
  twitter: chalk.cyan(`https://twitter.com/sarthakkapila0`),
  email: chalk.red(`    sarthakkapila1@gmail.com`),
  languages: {
    Typescript: { icon: "üü¶", color: chalk.blueBright },
    Python: { icon: "üêç", color: chalk.green },
    Solidity: { icon: "üëΩ", color: chalk.blue },
    Rust: { icon: "ü¶Ä", color: chalk.red },
  },
  frameworks: {
    NextJs: { icon: "üåê ", color: chalk.yellow },
    ExpressJs: { icon: "üöÇ", color: chalk.blueBright },
    TailwindCss: { icon: "üçÉ", color: chalk.green },
    Hardhat: { icon: "üß¢", color: chalk.blue },
    Langchain: { icon: "‚õìÔ∏è‚Äçüí•", color: chalk.red },
  },
  others: {
    Docker: { icon: "üê≥", color: chalk.blue },
    mongodb: { icon: "üçÉ", color: chalk.green },
    PostgreSQL: { icon: "üêò", color: chalk.blue },
    Git: { icon: "üêô", color: chalk.blue },
    Jenkins: { icon: "üõéÔ∏è", color: chalk.blue },
  }
};

const languagesArray = Object.entries(details.languages);
const frameworksArray = Object.entries(details.frameworks);
const othersArray = Object.entries(details.others);

const languagesRows = [];
const frameworksRows = [];
const othersRows = [];

for (let i = 0; i < languagesArray.length; i += 4) {
  const slicedLanguages = languagesArray.slice(i, i + 4);
  const row = slicedLanguages
    .map(([lang, { icon, color }]) => `${color(`${icon} ${lang}`)}`)
    .join(" ");
  languagesRows.push(row);
}

for (let i = 0; i < frameworksArray.length; i += 4) {
  const slicedFrameworks = frameworksArray.slice(i, i + 4);
  const row = slicedFrameworks
    .map(([lang, { icon, color }]) => `${color(`${icon} ${lang}`)}`)
    .join(" ");
  frameworksRows.push(row);
}

for (let i = 0; i < othersArray.length; i += 4) {
  const slicedOthers = othersArray.slice(i, i + 4);
  const row = slicedOthers
    .map(([lang, { icon, color }]) => `${color(`${icon} ${lang}`)}`)
    .join(" ");
  othersRows.push(row);
}

const info = [
  `${chalk.bold("ü¶∑ Name:")}${details.name}`,
  `${chalk.bold("üí° About:")} ${details.occupation}`,
  `${chalk.bold("üåê Website:")}   ${details.website}`,
  `${chalk.bold("üêô GitHub:")}    ${details.github}`,
  `${chalk.bold("üê¶ Twitter:")}   ${details.twitter}`,
  `${chalk.bold("üìß Email:")} ${details.email}`,
  `${chalk.bold("üíª Languages:")}`,
  ...languagesRows,
  `${chalk.bold("üîß Frameworks:")}`,
  ...frameworksRows,
  `${chalk.bold("üîß Others:")}`,
  ...othersRows,
];

const asciiLogoLines = asciiLogo.trim().split("\n");
const infoLines = info;

const logoWidth = Math.max(...asciiLogoLines.map((line) => line.length));
const detailsWidth = Math.max(...infoLines.map((line) => line.length));
logoWidth + 4 + detailsWidth;

const outputLines = [];
for (let i = 0; i < Math.max(asciiLogoLines.length, infoLines.length); i++) {
  const logoLine = asciiLogoLines[i] || "";
  const infoLine = infoLines[i] || "";
  const paddedLogoLine = logoLine.padEnd(logoWidth, " ");
  outputLines.push(`${paddedLogoLine}    ${infoLine}`);
}

const output = outputLines.join("\n");

const message = boxen(output, { padding: 1, margin: 1, borderStyle: "classic" });

console.log(message);